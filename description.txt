
🖥️ RISC-V 16-bit Processor - Οδηγός Υλοποίησης
🎯 Στόχος
Υλοποίηση ενός πλήρους 16-bit RISC-V επεξεργαστή με όλα τα απαραίτητα components και GUI για εκπαιδευτικούς σκοπούς.

📋 Αρχιτεκτονική Overview
🔄 Βασική Ροή Εκτέλεσης:
1. Assembly Code (text file) 
   ↓
2. Assembler → Binary Instructions
   ↓  
3. Instruction Memory (φόρτωση program)
   ↓
4. EXECUTION CYCLE:
   - Fetch: Διάβασμα εντολής από memory
   - Decode: Ανάλυση εντολής 
   - Execute: Εκτέλεση μέσω ALU/Memory
   - Write Back: Αποθήκευση αποτελέσματος
🏗️ Components που θα υλοποιήσεις:
Core Components:

ALU - Arithmetic Logic Unit
RegisterFile - 16 καταχωρητές (x0-x15)
Memory System - Instruction & Data Memory
InstructionDecoder - Binary → Structured format
ControlUnit - Control signals generation
MainCPU - Integration όλων των components

Tools:
7. Assembler - Assembly → Binary
8. GUI - Visual interface (προαιρετικό)

📊 Instruction Set Architecture (ISA)
16-bit Instruction Format:
[4-bit opcode][12-bit format specific]
Instruction Types:

R-Type: [opcode][rd][rs1][rs2] (4+4+4+4)
I-Type: [opcode][rd][rs1][imm] (4+4+4+4)
S-Type: [opcode][rs2][rs1][imm] (4+4+4+4)
B-Type: [opcode][rs1][rs2][offset] (4+4+4+4)
J-Type: [opcode][rd][offset] (4+4+8)

Υποστηριζόμενες Εντολές:
R-Type: ADD, SUB, AND, OR, XOR
I-Type: ADDI, ANDI, ORI, LW  
S-Type: SW
B-Type: BEQ, BNE
J-Type: JAL
Special: NOP, HALT

🛠️ Βήμα-προς-Βήμα Υλοποίηση
Phase 1: Core Components
1.1 ALU (Arithmetic Logic Unit)
Σκοπός: Εκτέλεση αριθμητικών και λογικών πράξεων
Τι θα υλοποιήσεις:

Μέθοδος execute(input_a, input_b, alu_control)
Operations: ADD, SUB, AND, OR, XOR, EQ, NE
Flags: zero_flag, overflow_flag, negative_flag
16-bit value masking

Key Points:

Όλες οι τιμές είναι 16-bit (0x0000 - 0xFFFF)
Overflow detection για πρόσθεση
Two's complement για αφαίρεση

1.2 RegisterFile
Σκοπός: 16 καταχωρητές για προσωρινή αποθήκευση
Τι θα υλοποιήσεις:

16 registers: x0-x15 με ABI names
read(reg_num) και write(reg_num, value)
x0 hard-wired στο 0 (read-only)
16-bit value masking

ABI Mapping:
x0=zero, x1=ra, x2=sp, x3=gp, x4=tp, x5=t0, x6=t1, x7=t2,
x8=s0, x9=s1, x10=a0, x11=a1, x12=a2, x13=a3, x14=a4, x15=a7
1.3 Memory System
Σκοπός: Αποθήκευση εντολών και δεδομένων
InstructionMemory:

Φόρτωση binary program
read_instruction(address)
Read-only μετά τη φόρτωση

DataMemory:

read_word(address) και write_word(address, value)
Address space: 0x1000-0x13FF
Statistics tracking

1.4 InstructionDecoder
Σκοπός: Binary instruction → Structured format
Τι θα υλοποιήσεις:

decode(instruction) → Dictionary με όλες τις πληροφορίες
Extraction: opcode, registers, immediate values
Validation και error handling
Assembly string generation για debugging

1.5 ControlUnit
Σκοπός: Παραγωγή control signals για όλα τα components
Τι θα υλοποιήσεις:

generate_control_signals(decoded_instruction)
Control table lookup για κάθε εντολή
Signals: ALU operation, memory read/write, register write, PC update

Phase 2: Integration
2.1 MainCPU
Σκοπός: Ενοποίηση όλων των components
Cycle εκτέλεσης:
pythondef step():
    # 1. Fetch
    instruction = instruction_memory.read(pc)
    
    # 2. Decode  
    decoded = decoder.decode(instruction)
    
    # 3. Control
    signals = control_unit.generate_signals(decoded)
    
    # 4. Execute
    execute_instruction(decoded, signals)
    
    # 5. Update PC
    update_program_counter(signals)
2.2 Assembler
Σκοπός: Assembly code → Binary instructions
Τι θα υλοποιήσεις:

Two-pass assembler (labels στο 1ο πέρασμα)
Instruction parsing και encoding
Label resolution
Binary file generation

Phase 3: Tools & UI
3.1 Testing Framework

Unit tests για κάθε component
Integration tests
Example programs

3.2 GUI (Προαιρετικό)

Assembly editor
Register visualization
Memory viewer
Step-by-step execution
Real-time status


🎯 Σειρά Υλοποίησης (Recommended)
Week 1: Foundation

ALU - Ξεκινάς από εδώ (απλό, καθαρό interface)
RegisterFile - Dependency της ALU

Week 2: Memory & Decode

Memory - InstructionMemory + DataMemory
InstructionDecoder - Binary → Readable format

Week 3: Control & Integration

ControlUnit - Ο "εγκέφαλος"
MainCPU - Συνδέει τα πάντα

Week 4: Tools

Assembler - Assembly → Binary
Testing - Verification
GUI - Visual interface


📝 Development Guidelines
Coding Standards:

Descriptive variable names
Comprehensive docstrings
Error handling στα boundaries
Unit tests για κάθε method

Testing Strategy:

Test-driven development όπου είναι δυνατόν
Edge cases (0, max values, invalid inputs)
Integration tests με example programs

Documentation:

README με usage examples
Inline comments για complex logic
Architecture documentation


🚀 Εργαλεία Development
Required:

Python 3.7+
Standard library (typing, os, sys)

Optional:

CustomTkinter (για GUI)
Rich (για beautiful terminal output)


💡 Tips για Success

Start Simple: Υλοποίησε την πιο απλή έκδοση πρώτα
Test Early: Γράψε tests από την αρχή
Incremental: Ένα component τη φορά
Debug Tools: Print statements και logging
Ask Questions: Όταν κολλήσεις, ρώτα!